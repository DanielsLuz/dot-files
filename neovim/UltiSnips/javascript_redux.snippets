# ===============================================
# Redux helpers
# ===============================================
snippet mstp "Map state to props (Redux)"
const mapStateToProps = (state, _ownProps) => {
	return {
		${1:prop}: state.prop
	}
}
endsnippet

snippet mdtp "Map dispatch to props (Redux)"
const mapDispatchToProps = (dispatch, ownProps) => {
	return {
		onEvent: () => {
			dispatch(${1:action(ownProps.prop)})
		}
	}
}
endsnippet

snippet action "Redux action creator"
export const ${1:actionName} = () => {
	return {
		type: ActionTypes.${2:ACTION_TYPE},
		payload: $3
	};
};

endsnippet

snippet store "Redux store"
import { createStore, applyMiddleware, compose } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from 'reducers/rootReducer';
import config from 'config';

// Middleware setting
const enhancer = config.development() ? compose(
	// Development enhancer
	applyMiddleware(thunk),
	window.devToolsExtension ? window.devToolsExtension() : f => f
) : compose(
	// Production enhancer
	applyMiddleware(thunk)
);

// Store configuration
function configureStore(initialState) {
	const store = createStore(rootReducer, initialState, enhancer);
	hotReloadReducers(store);
	return store;
}

// Reducer reloading
function hotReloadReducers(store) {
	if (module.hot && config.development()) {
		module.hot.accept('../reducers/rootReducer', () => {
			const nextReducer = require('../reducers/rootReducer').default;
			store.replaceReducer(nextReducer);
		});
	}
}

const store = configureStore();
export default store;
endsnippet

snippet rreducer "Redux root reducer"
import { combineReducers } from 'redux';
import { routerReducer } from 'react-router-redux';
import dataReducer from './dataReducer';

const rootReducer = combineReducers({
	data: dataReducer
});

export default rootReducer;
endsnippet

snippet reducer "Redux reducer"
const defaultState = [{
	1: {
		name: 'John',
		age: 23
	}
}];

const ${1:personReducer} = (state = defaultState, action) => {
	switch (action.type) {
	case '${2:ACTION_TYPE}':
		return $3;
	default:
		return state;
	}
};

export default $1;
endsnippet
