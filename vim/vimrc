" ######################################################################################################################
" ### Author : Martin Toma <martin.toma.svk@gmail.com>                                                               ###
" ######################################################################################################################
" ### VIMRC Configuration focused on RAILS development                                                               ###
" ### Date created : Tue Nov 12 14:14:56 CET 2013                                                                    ###
" ######################################################################################################################

" ======================================================================================================================
" 1.0 Plugin manager (Plug) settings
" ======================================================================================================================
"{{{

call plug#begin('~/.vim/plugged')

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" 1.1 Plugin list
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.1 Language or framework supporting plugins
" ---------------------------------------------------------------------------------------------------------------------

" -----------------------------------------------------
" Universal
" -----------------------------------------------------
" Most common languages support (syntax, indenting, etc. ) for ruby, js, etc.
Plug 'sheerun/vim-polyglot'
" Needs linters to be installed to work properly (see https://github.com/scrooloose/syntastic/wiki/Syntax-Checkers)
Plug 'scrooloose/syntastic', { 'for': ['java', 'ruby', 'eruby', 'coffee', 'javascript', 'html'] }
" Snippets support
Plug 'SirVer/ultisnips'
" Commenting support
Plug 'tpope/vim-commentary'

" -----------------------------------------------------
" Ruby/Rails
" -----------------------------------------------------
" Rails navigation, etc. plugin (i.e. :Rmigration)
Plug 'tpope/vim-rails', { 'for': ['ruby', 'eruby'] }
" Automatically inserts 'end' wisely
Plug 'tpope/vim-endwise', { 'for': ['ruby', 'eruby'] }
" Ruby eval plugin
Plug 'kmdsbng/vim-ruby-eval', { 'for': ['ruby', 'eruby'] }
" Partial extraction
Plug 'jbgutierrez/vim-partial'
" Change between ruby 1.9 and 1.8 hash syntax
Plug 'ck3g/vim-change-hash-syntax', { 'for': ['ruby', 'eruby'] }
" Refactoring tools
Plug 'ecomba/vim-ruby-refactoring', { 'for': ['ruby', 'eruby'] }
" Ruby best practices checker
Plug 'ngmy/vim-rubocop', { 'for': ['ruby', 'eruby'] }

" -----------------------------------------------------
" HTML/CSS
" -----------------------------------------------------
" CSS color highlighter
Plug 'gorodinskiy/vim-coloresque', { 'for': ['css', 'sass', 'scss', 'less'] }
" Sparkup, emmet alternative (<C-e> to expand expression)
Plug 'rstacruz/sparkup', { 'for': ['html', 'xhtml']}

" -----------------------------------------------------
" JavaScript / CoffeeScript
" -----------------------------------------------------
" Tern auto-completion engine (run 'npm install tern-coffee' after update)
Plug 'marijnh/tern_for_vim', { 'for': ['javascript', 'coffee'] }
" Tern for CoffeeScript
Plug 'othree/tern_for_vim_coffee', { 'for': ['javascript', 'coffee'] }
" JS libs syntax files, ember, angular, etc.
Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript', 'coffee'] }

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.2 Motion/text navigation improving plugins
" ---------------------------------------------------------------------------------------------------------------------

" Easy motion
Plug 'Lokaltog/vim-easymotion'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.3 Files/code navigation improving plugins
" ---------------------------------------------------------------------------------------------------------------------

" Unite (Files, Buffers, Commands, etc. fuzzy searcher)
Plug 'Shougo/unite.vim'
" Unite outline plugin
Plug 'Shougo/unite-outline'
" Vimfiler file browser
Plug 'Shougo/vimfiler.vim'
" Nerdtree file browser
Plug 'scrooloose/nerdtree'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.4 Text insertion improving plugins
" ---------------------------------------------------------------------------------------------------------------------

" Completion with tab
Plug 'ervandew/supertab'
" Multiple cursors feature
Plug 'terryma/vim-multiple-cursors'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.5 Interface improving plugins
" ---------------------------------------------------------------------------------------------------------------------

" Improved start screen
Plug 'mhinz/vim-startify'
" Airline (improved status line)
Plug 'bling/vim-airline'
" Distraction free editing
Plug 'junegunn/goyo.vim'
" Automatic cursor shape change
Plug 'jszakmeister/vim-togglecursor'
" Interesting words highlighter
Plug 'vasconcelloslf/vim-interestingwords'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.6 Git/Github support plugins
" ---------------------------------------------------------------------------------------------------------------------

" Git wrapper
Plug 'tpope/vim-fugitive'
" Git changes visualizer
Plug 'airblade/vim-gitgutter'
" Gitk for vim
Plug 'gregsexton/gitv'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.7 Text objects improving plugins
" ---------------------------------------------------------------------------------------------------------------------
"
" Matchit better textobj support
Plug 'tmhedberg/matchit'
" Change surroundings characters
Plug 'tpope/vim-surround'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.8 Color-scheme plugins
" ---------------------------------------------------------------------------------------------------------------------

" Molokai theme
Plug 'tomasr/molokai'
" Hybrid dark color theme
Plug 'w0ng/vim-hybrid'
" Jellybeans theme
Plug 'nanotech/jellybeans.vim'
" Approximation to make gvim schemes work in terminal
Plug 'vim-scripts/CSApprox'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.9 Dependencies
" ---------------------------------------------------------------------------------------------------------------------

" Async processing (for Unite) (make after checkout)
Plug 'Shougo/vimproc.vim'

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" 1.2 End of plugin declaration
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
call plug#end()
"}}}

" ======================================================================================================================
" 2.0 Basic settings
" ======================================================================================================================
"{{{

set shell=/bin/bash                         " Setting shell to bash
set nocompatible                            " No compatible with vi mode
set number                                  " Line numbers
set ignorecase                              " Don't ignore cases
set smartcase                               " Make search case sensitive only if it contains uppercase letters
set laststatus=2                            " Always show status line
set showmode                                " Always show mode
set wildmenu                                " Better auto-complete of ex commands
set textwidth=120                           " Text width is 120 chars
set autoread                                " Automatically reload change files on disk
set cursorline                              " Set default cursor line (highlighting is done by color scheme)
set cmdheight=1                             " Command line height
set pumheight=10                            " Completion window max size
set iskeyword-=_                            " Set underscore as a word separator
set iskeyword-=-                            " Set dash as a word separator
set timeoutlen=250                          " Setting ESC timeout
set hlsearch                                " Highlight search
set incsearch                               " Incremental search
set hidden                                  " Enables to switch between unsaved buffers and keep undo history
set undolevels=100                          " How many undo commands to remember
set clipboard+=unnamed                      " Use system clipboard
set history=1024                            " Number of things to remember in history
set nohlsearch                              " Don't highlight after search
set mat=2                                   " How many tenths of a second to blink when matching brackets
set lazyredraw                              " Don't redraw while executing macros (better performance)
set magic                                   " For regular expressions turn magic on
set showmatch                               " Show matching brackets when text indicator is over them
set encoding=utf8                           " Set utf8 as standard encoding and en_US as the standard language
set pastetoggle=<F3>                        " Toggle between paste and nopaste
set list                                    " Display whitechars by default (use F7)
set spelllang=en_us                         " Set language to us English
set backspace=indent,eol,start              " Set default behaviour of backspace
set spellfile=~/.vim/dictionary.utf-8.add   " Use this file for spell checking
set nostartofline                           " Prevent cursor from moving to beginning of line when switching buffers
set virtualedit=block                       " To be able to select past EOL in visual block mode
set nojoinspaces                            " No extra space when joining a line which ends with . ? !
set startofline                             " When doing thing like gg or G, will move cursor to start of line
set wrapscan                                " Search again from top when reached the bottom
set showcmd                                 " Show incomplete commands
set scrolloff=5                             " Scroll when closing to top or bottom of the sceeen
set updatetime=1000                         " Updatetime used to create swapfile or i.e. to refresh tagbar

" -----------------------------------------------------
" 2.1 Intendation settings (2 spaces tabs)
" -----------------------------------------------------
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2

" -----------------------------------------------------
" 2.2 Split settings (more natural).
" -----------------------------------------------------
set splitbelow
set splitright

" -----------------------------------------------------
" 2.3 Turn backup off, since most stuff is in git
" -----------------------------------------------------
set nobackup
set nowb
set noswapfile

" -----------------------------------------------------
" 2.4 Highlight whitespaces
" -----------------------------------------------------
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·,eol:¬

" -----------------------------------------------------
" 2.5 Filetype settings
" -----------------------------------------------------
filetype off
filetype plugin on
filetype indent on

" -----------------------------------------------------
" 2.6 Folding settings, by default is disabled, use 'za'
" -----------------------------------------------------
set foldmethod=marker
set foldlevelstart=2
set fillchars="fold: "

" -----------------------------------------------------
" 2.7 Omni completion settings
" -----------------------------------------------------
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType java set omnifunc=javacomplete#Complete
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading=1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global=1
autocmd FileType ruby,eruby let g:rubycomplete_rails=1
autocmd FileType ruby,eruby let g:rubycomplete_load_gemfile=1

" make CSS omni-completion work for SASS and SCSS
autocmd BufNewFile,BufRead *.scss set ft=scss.css
autocmd BufNewFile,BufRead *.sass set ft=sass.css

" use syntax complete if nothing else available
if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
        \ if &omnifunc == "" |
        \   setlocal omnifunc=syntaxcomplete#Complete |
        \ endif
endif

" Dont show preview scratch buffers
set completeopt-=preview

" -----------------------------------------------------
" 2.8 Completion ignore list
" -----------------------------------------------------
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
"}}}

" ======================================================================================================================
" 3.0 Mapping settings
" ======================================================================================================================
"{{{

" -----------------------------------------------------
" 3.1 Setting leaders
" -----------------------------------------------------
let g:mapleader="\<space>"
let g:maplocalleader=","

" -----------------------------------------------------
" 3.2 Disabling arrow keys, space key, exmode enter
" with Q key, help with F1, etc.
" -----------------------------------------------------
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <bs> <nop>
nnoremap <delete> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap <Space> <nop>
inoremap <F1> <nop>
nnoremap <F1> <nop>
nnoremap Q <nop>

" -----------------------------------------------------
" 3.3 Vim defaults overriding
" -----------------------------------------------------

" Visual linewise up and down by default
noremap j gj
noremap k gk

" When jump to next match also center screen
noremap n nzz
noremap N Nzz

" Same when moving up and down
noremap <c-d> <c-d>zz
noremap <c-u> <c-u>zz

" Remap H and L (top, bottom of screen to left and right end of line)
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $

" Window navigations using arrow keys only
nnoremap <silent> <Left>  <C-w>h
nnoremap <silent> <Down>  <C-w>j
nnoremap <silent> <Up>    <C-w>k
nnoremap <silent> <Right> <C-w>l

" More logical Y (defaul was alias for yy)
nnoremap Y y$

" Quick replay q macro
nnoremap Q @q

" Mark with big M (default to middle of the screen overriden)
" m is used as EasyMotion leader
nnoremap M m

" Yank and Paste uses custom functions which use xclip
vnoremap <silent> <localleader>y y:call ClipboardYank()<CR>
nnoremap <silent> <localleader>p :call ClipboardPaste()<CR>p

" -----------------------------------------------------
" 3.4 Common tasks
" -----------------------------------------------------

" Quick save and quit / buffer delete
nnoremap <localleader>w :w<CR>
nnoremap <silent> <localleader>q :q<CR>

" Reformat whole file
nnoremap <silent> <localleader>f mzgg=G`z

" -----------------------------------------------------
" 3.5 Toggles
" -----------------------------------------------------

" Toggle nerdtree (file browser) panel
nnoremap <silent> <F1> :NERDTreeToggle<CR>
" Toggle in-buffer file browser
nnoremap <silent> <F2> :VimFilerBufferDir -find -force-quit<CR>
" Toggle spelling on and off
nnoremap <silent> <F4> :set spell!<CR>
" Source (reload) vimrc, so new setting will be applied
nnoremap <silent> <F5> :source $MYVIMRC<CR>
" Toggle search highlight
nnoremap <silent> <F6> :set nohlsearch!<CR>
" Toggle white characters visibility
nnoremap <silent> <F7> :set list!<CR>
" Toggle rainbow paranthesis
nnoremap <silent> <F8> :RainbowParenthesesToggle<CR>
" Toggle Goyo mode
nnoremap <silent> <F9> :Goyo<CR>
" Toggle syntax checking
nnoremap <silent> <F11> :SyntasticToggleMode<CR>
" Echo out toggles legend on <F12>
nnoremap <F12> :call ShowToggles()<CR>

" -----------------------------------------------------
" 3.6 Window / Buffer management
" -----------------------------------------------------

" Windows resizing using window prefix and arrow keys
nnoremap <silent> <leader><Left> :vertical resize -1<CR>
nnoremap <silent> <leader><Right> :vertical resize +1<CR>
nnoremap <silent> <leader><Up> :resize +1<CR>
nnoremap <silent> <leader><Down> :resize -1<CR>

" Buffers navigation and management
nnoremap <silent> + :bn<CR>
nnoremap <silent> _ :bp<CR>
nnoremap <silent> ,d :bd<CR>

" -----------------------------------------------------
" 3.7 Command abbrevations and mappings
" -----------------------------------------------------

" Quiting and saving all
cmap ww wqall
cmap qq qall

" Accepting case errors
cab W! w!
cab Q! q!
cab Wq wq
cab Wa wa
cab wQ wq
cab WQ wq
cab W w
cab Q q
"}}}

" ======================================================================================================================
" 4.0 Plugins settings
" ======================================================================================================================
"{{{

" -----------------------------------------------------
" 4.1 Airline (status line)
" -----------------------------------------------------
let g:airline_powerline_fonts=1
let g:airline_exclude_preview=1
let g:airline#extensions#branch#empty_message="No VCS"
let g:airline#extensions#whitespace#enabled=0
let g:airline#extensions#syntastic#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#tab_nr_type=1
let g:airline#extensions#tabline#fnamecollapse=1
let g:airline#extensions#hunks#non_zero_only=1

" -----------------------------------------------------
" 4.2 Unite
" -----------------------------------------------------

" Matcher settings
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file_rec/async','sorters','sorter_rank')

" Track yank history
let g:unite_source_history_yank_enable=1

" Use ag if available
if executable('ag')
  let g:unite_source_grep_command='ag'
  let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C0'
  let g:unite_source_grep_recursive_opt=''
  " Ignore vcs files
  let g:unite_source_rec_async_command='ag --nocolor --nogroup --ignore ".hg" --ignore ".svn" --ignore ".git" --ignore ".bzr" --ignore ".meteor"--hidden -g ""'
  let g:unite_source_file_async_command='ag --nocolor --nogroup --ignore ".hg" --ignore ".svn" --ignore ".git" --ignore ".bzr" --ignore ".meteor" --hidden -g ""'
endif

" Ignore wildignore files
call unite#custom#source('file_rec', 'ignore_globs', split(&wildignore, ','))

" Custom profile
call unite#custom#profile('default', 'context', {
      \   'prompt': '» ',
      \   'winheight': 15,
      \ })

" Add syntax highlighting
let g:unite_source_line_enable_highlight=1

" -----------------------------------------------------
" 4.3 Syntastic (syntax checker)
" -----------------------------------------------------
let g:syntastic_ruby_checkers=['mri']
" mark syntax errors with :signs
let g:syntastic_enable_signs=1
" automatically jump to the error when saving the file
let g:syntastic_auto_jump=0
" show the error list automatically
let g:syntastic_auto_loc_list=1
" check on open as well as save
let g:syntastic_check_on_open=1
" don't care about warnings
let g:syntastic_quiet_messages={'level': 'warnings'}
" Passive mode is default
let g:syntastic_mode_map={ 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
" Disable csslint, scss and sass syntax checking is not behaving correctly
let g:loaded_syntastic_css_csslint_checker=0

" -----------------------------------------------------
" 4.4 Superatab
" -----------------------------------------------------
let g:SuperTabDefaultCompletionType='context'
autocmd FileType *
      \ if &omnifunc != '' |
      \   call SuperTabChain(&omnifunc, "<c-p>") |
      \ endif

" -----------------------------------------------------
" 4.5 Goyo
" -----------------------------------------------------
let g:goyo_width=140
let g:goyo_margin_top=1
let g:goyo_margin_bottom=1
let g:goyo_linenr=1

" -----------------------------------------------------
" 4.6 EasyMotion
" -----------------------------------------------------
" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" -----------------------------------------------------
" 4.6 NERDTree
" -----------------------------------------------------
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
let g:NERDTreeWinSize=40
" NerdTree buffer settings
autocmd FileType nerdtree set nolist

" -----------------------------------------------------
" 4.7 Interesting words
" -----------------------------------------------------
let g:interestingWordsTermColors = ['154', '121', '211', '137', '214', '222']
"}}}

" ======================================================================================================================
" 5.0 Plugin mappings
" ======================================================================================================================
"{{{
" -----------------------------------------------------
" 5.1 Unite and extensions
" -----------------------------------------------------

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <silent> <buffer> <C-j> <Plug>(unite_select_next_line)
  imap <silent> <buffer> <C-k> <Plug>(unite_select_previous_line)
  " Runs 'splits' action by <C-s> and <C-v>
  imap <silent> <buffer> <expr> <C-s> unite#do_action('split')
  imap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  " Exit with escape
  nmap <silent> <buffer> <ESC> <Plug>(unite_exit)
  " Mark candidates
  vmap <silent> <buffer> m <Plug>(unite_toggle_mark_selected_candidates)
  nmap <silent> <buffer> m <Plug>(unite_toggle_mark_current_candidate)
endfunction

" [o]pen files recursively
nnoremap <silent> <leader>o :<C-u>Unite -no-split -buffer-name=project-files -start-insert file_rec/async:!<CR>
" search between open files - [b]uffer
nnoremap <silent> <Tab> :<C-u>Unite -no-split -buffer-name=buffers buffer<CR>
" Search in current file tags
nnoremap <silent> <leader>t :<C-u>Unite -no-split -buffer-name=tags -start-insert outline<CR>
" Search for term in cwd file ([g]rep)
nnoremap <silent> <leader>g :<C-u>Unite -silent -auto-resize grep:.<CR>
" Search in edit [h]istory
nnoremap <silent> <leader>h :<C-u>Unite -buffer-name=edit-history -auto-resize change<CR>
" Search in [c]ommands
nnoremap <silent> <leader>c :<C-u>Unite -start-insert -auto-resize command<CR>
" Search in defined [m]appings
nnoremap <silent> <leader>m :<C-u>Unite -start-insert -auto-resize mapping<CR>
" Search in [l]ines on current buffer
nnoremap <silent> <leader>l :<C-u>Unite -no-split -buffer-name=line-search -start-insert line<CR>
" Search in [y]ank history
nnoremap <silent> <leader>y :<C-u>Unite -buffer-name=yank-history -auto-resize history/yank<CR>

" -----------------------------------------------------
" 5.2 Surround shortcut for quotes changing
" -----------------------------------------------------
nmap cq cs"'
nmap cQ cs'"

" -----------------------------------------------------
" 5.3 Ruby eval
" -----------------------------------------------------
nmap <silent> <localleader>r :<C-u>RubyEval<CR>

" -----------------------------------------------------
" 5.4 EasyMotion
" -----------------------------------------------------
" [m]otion prefix
nmap m <Plug>(easymotion-prefix)

" Seek 2 character motion
nmap s <Plug>(easymotion-sl2)

" Improved search
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" -----------------------------------------------------
" 5.5 Ultisnips
" -----------------------------------------------------
" Disable built-in cx-ck to be able to go backward in US
inoremap <c-x><c-k> <nop>
let g:UltiSnipsExpandTrigger='<c-j>'
let g:UltiSnipsListSnippets='<c-l>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'
let g:UltiSnipsJumpBackwardTrigger='<c-k>'

" -----------------------------------------------------
" 5.6 Simple commenter
" -----------------------------------------------------
" comment line
nmap <localleader>cc :SimpleComment<CR>
" uncomment line
nmap <localleader>cu :SimpleUncomment<CR>

" -----------------------------------------------------
" 5.7 Interesting words
" -----------------------------------------------------
nnoremap <silent> <leader>k :call InterestingWords('n')<CR>
nnoremap <silent> <leader>kk :call UncolorAllWords()<CR>
"}}}

" ======================================================================================================================
" 6.0 Color and highlighting settings
" ======================================================================================================================
"{{{
" Syntax highlighting
syntax on

" XTerm 256 colors
if $TERM == 'xterm-256color' || 'screen-256color'
  set t_Co=256
endif

" Dark background as default
set bg=dark

" Color scheme based on time
if strftime("%H") < 14
  let g:molokai_original=1
  let g:rehash256=1
  let g:airline_theme='tomorrow'
  colorscheme molokai
else
  let g:airline_theme='jellybeans'
  colorscheme jellybeans
  highlight ColorColumn ctermbg=235
endif

" Color column
let &colorcolumn=121

" Git gutter (signcolumn color)
highlight clear SignColumn

" Remove underline in folded lines
hi Folded term=NONE cterm=NONE gui=NONE ctermbg=NONE
"}}}

" ======================================================================================================================
" 7.0 Filetype specific settings
" ======================================================================================================================
"{{{
autocmd FileType php setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType coffee,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=120
autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0
autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType snippets setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=120
autocmd FileType vim setlocal keywordprg=:help tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
"}}}

" ======================================================================================================================
" 8.0 Custom functions and autocommands
" ======================================================================================================================
"{{{
" Close vim if the last open window is nerdtree
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Hide cursorlines when focus lost
autocmd BufEnter * set cursorline
autocmd BufLeave * set nocursorline

" Remove trailing whitespaces automatically before save
autocmd BufWritePre * :%s/\s\+$//e

function! ShowToggles()
  echom "| <F1> Vimfiler | <F2> Vimfiler CWD | <F3> Paste mode | <F4> Spellcheck | <F5> Source .rc | <F6> Search Highlight |" .
        \" <F7> Whitechars | <F8> Rainbow() | <F9> Goyo mode | <F10> Syntastic | <F12> This message |"
endfunction

" Copy and paste function using xclip
function! ClipboardYank()
  call system('xclip -i -selection clipboard', @@)
endfunction

function! ClipboardPaste()
  let @@ = system('xclip -o -selection clipboard')
endfunction
"}}}
