" ######################################################################################################################
" ### Author : Martin Toma <martin.toma.svk@gmail.com>                                                               ###
" ######################################################################################################################
" ### NVIMRC Configuration focused on RAILS development                                                              ###
" ### Date created : Tue Oct 14 19:58:11 CEST 2014                                                                   ###
" ######################################################################################################################

" ======================================================================================================================
" 1.0 Plugin manager (Plug) settings
" ======================================================================================================================

call plug#begin('~/.nvim/plugged')

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" 1.1 Plugin list
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.1 Language or framework supporting plugins
" ---------------------------------------------------------------------------------------------------------------------

" -----------------------------------------------------
" 1.1.1.1 Universal
" -----------------------------------------------------
" Most common languages support (syntax, indenting, etc. ) for ruby, js, etc.
Plug 'sheerun/vim-polyglot'
" Needs linters to be installed to work properly (see https://github.com/scrooloose/syntastic/wiki/Syntax-Checkers)
Plug 'scrooloose/syntastic', { 'for': ['java', 'ruby', 'eruby', 'coffee', 'javascript', 'html'] }
" Snipmate stype snippets support
Plug 'garbas/vim-snipmate'
" Snippets library
Plug 'honza/vim-snippets'

" -----------------------------------------------------
" 1.1.1.2 Ruby/Rails
" -----------------------------------------------------
" Rails navigation, etc. plugin (f.e. :Rmigration)
Plug 'tpope/vim-rails', { 'for': ['ruby', 'eruby'] }
" Automatically inserts 'end' wisely
Plug 'tpope/vim-endwise', { 'for': ['ruby', 'eruby'] }
" Splitting and joining multiple lines ruby constructs
Plug 'AndrewRadev/splitjoin.vim', { 'for': ['ruby', 'eruby'] }
" Ruby eval plugin
Plug 'kmdsbng/vim-ruby-eval', { 'for': ['ruby', 'eruby'] }
" Change between ruby 1.9 and 1.8 hash syntax
Plug 'ck3g/vim-change-hash-syntax', { 'for': ['ruby', 'eruby'] }
" Refactoring tools
Plug 'ecomba/vim-ruby-refactoring', { 'for': ['ruby', 'eruby'] }
" Ruby best practices checker
Plug 'ngmy/vim-rubocop'

" -----------------------------------------------------
" 1.1.1.3 HTML/CSS/JS
" -----------------------------------------------------
" HTML autoclose tags (after typing closing > bracket)
Plug 'amirh/HTML-AutoCloseTag', { 'for': ['html', 'xhtml', 'eruby', 'haml', 'slim'] }
" CSS color highlighter
Plug 'ap/vim-css-color', { 'for': ['css', 'sass', 'less'] }
" Emmet for fast html prototyping
Plug 'mattn/emmet-vim', { 'for': ['html', 'xhtml', 'eruby', 'haml', 'slim', 'css', 'sass', 'less'] }
" JS libs syntax files, ember, angular, etc.
Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript', 'coffee'] }

" -----------------------------------------------------
" 1.1.1.4 Android
" -----------------------------------------------------
" Android build and deploy helpers
Plug 'hsanson/vim-android', { 'for': 'java' }

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.2 Motion/code navigation improving plugins
" ---------------------------------------------------------------------------------------------------------------------

" Seek, easy motion for long lines
Plug 'goldfeld/vim-seek'
" Multiple cursors feature
Plug 'terryma/vim-multiple-cursors'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.3 Editing improving plugins
" ---------------------------------------------------------------------------------------------------------------------

" Auto-closing brackets and quotes
Plug 'Raimondi/delimitMate'
" Change surroundings characters
Plug 'tpope/vim-surround'
" Trailing spaces deleter (:FixWhitespaces)
Plug 'bronson/vim-trailing-whitespace'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.4 Interface improving plugins
" ---------------------------------------------------------------------------------------------------------------------

" Fuzzy file, buffer, MRU finder
Plug 'kien/ctrlp.vim'
" CtrlP extension to search in commands
Plug 'fisadev/vim-ctrlp-cmdpalette'
" Tabs, buffers, sessions management plugin
Plug 'szw/vim-ctrlspace'
" Nerdtree file browser
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Airline (improved status line)
Plug 'bling/vim-airline'
" History tree visualizer
Plug 'sjl/gundo.vim', { 'on': 'GundoToggle' }
" Tags (methods, classes) display window
Plug 'majutsushi/tagbar'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.5 Internals improving plugins
" ---------------------------------------------------------------------------------------------------------------------

" Supertab plugin
Plug 'ervandew/supertab'
" YANK history management
Plug 'YankRing.vim'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.6 Git/Github support plugins
" ---------------------------------------------------------------------------------------------------------------------

" Git wrapper
Plug 'tpope/vim-fugitive'
" Git changes displayer
Plug 'airblade/vim-gitgutter'
" Gitk for vim
Plug 'gregsexton/gitv'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.7 External tools integration plugins
" ---------------------------------------------------------------------------------------------------------------------

" AG search for vim (used in ctrl-p) (ag alias silversearcher must be installed)
Plug 'ervandew/ag'
" Tmux basics tools (Twrite, ..)
Plug 'tpope/vim-tbone'
" Advanced search integrated to vim (using ag)
Plug 'dyng/ctrlsf.vim'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.8 Text objects improving plugins
" ---------------------------------------------------------------------------------------------------------------------
"
" Matchit better textobj support
Plug 'tmhedberg/matchit'
" Expanding region selection
Plug 'terryma/vim-expand-region'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.9 Color-scheme plugins
" ---------------------------------------------------------------------------------------------------------------------

" Tomorrow theme
Plug 'chriskempson/vim-tomorrow-theme'
" Molokai theme
Plug 'tomasr/molokai'
" Hybrid dark color theme
Plug 'w0ng/vim-hybrid'
" Approximation to make gvim schemes work in terminal
Plug 'vim-scripts/CSApprox'

" ---------------------------------------------------------------------------------------------------------------------
" 1.1.10 Other plugins
" ---------------------------------------------------------------------------------------------------------------------

" Rainbow parenthesis
Plug 'kien/rainbow_parentheses.vim'
" List of common mistakes to be corrected automagically
Plug 'panozzaj/vim-autocorrect'
" Benchmark vimrc
Plug 'mattn/benchvimrc-vim', { 'on': 'BenchVimrc' }
" Dependency for vim-snipmate
Plug 'marcweber/vim-addon-mw-utils'
" Dependency for vim-snipmate
Plug 'tomtom/tlib_vim'

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" 1.2 End of plugin declaration
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
call plug#end()

" ======================================================================================================================
" 2.0 Basic settings
" ======================================================================================================================

set shell=/bin/bash                         " Setting vim shell to bash
set nocompatible                            " No compatible with vi mode
set number                                  " Just line numbers
set noignorecase                            " Don't ignore cases
set laststatus=2                            " Always show status line
set showmode                                " Always show mode
set wildmenu                                " Better auto-complete of ex commands
set textwidth=120                           " Text width is 120 chars
set autoread                                " Automatically reload change files on disk
set bg=dark                                 " Dark background setting (dark theme version of current color)
set cursorline                              " Set default cursor line (highlighting is done by color scheme)
set cmdheight=1                             " Command line height
set pumheight=10                            " Completion window max size
set iskeyword-=_                            " Set underscore as a word separator
set timeoutlen=200                          " Setting ESC timeout
set hlsearch                                " Highlight search
set incsearch                               " Incremental search
set hidden                                  " Enables to switch between unsaved buffers and keep undo history
set undolevels=100                          " How many undo commands to remember
set clipboard+=unnamed                      " Use system clipboard
set history=1024                            " Number of things to remember in history
set nohlsearch                              " Don't highlight after search
set mat=2                                   " How many tenths of a second to blink when matching brackets
set lazyredraw                              " Don't redraw while executing macros (better performance)
set magic                                   " For regular expressions turn magic on
set showmatch                               " Show matching brackets when text indicator is over them
set encoding=utf8                           " Set utf8 as standard encoding and en_US as the standard language
set pastetoggle=<F3>                        " Toggle between paste and nopaste
set list                                    " To display chars listed in listchars below
set spelllang=en_us                         " Set language to us English
set backspace=indent,eol,start              " Set default behaviour of backspace
set spellfile=~/.vim/dictionary.utf-8.add   " Use same file as vim for spell checking

" -----------------------------------------------------
" 2.1 Intendation settings (2 spaces tabs)
" -----------------------------------------------------
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2

" -----------------------------------------------------
" 2.2 Split settings (more natural).
" -----------------------------------------------------
set splitbelow
set splitright

" -----------------------------------------------------
" 2.3 Turn backup off, since most stuff is in git
" -----------------------------------------------------
set nobackup
set nowb
set noswapfile

" -----------------------------------------------------
" 2.4 Highlight whitespaces
" -----------------------------------------------------
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" -----------------------------------------------------
" 2.5 Filetype settings
" -----------------------------------------------------
syntax on
filetype off
filetype plugin on
filetype indent on

" -----------------------------------------------------
" 2.6 Folding settings, by default is disabled, use 'zi'
" -----------------------------------------------------
set foldmethod=manual
set foldlevelstart=2
set fillchars="fold: "
set nofoldenable

" -----------------------------------------------------
" 2.7 Enable omni completion. (Ctrl-X Ctrl-O)
" -----------------------------------------------------
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType java set omnifunc=javacomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading=1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global=1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_load_gemfile = 1

" make CSS omni-completion work for SASS and SCSS
autocmd BufNewFile,BufRead *.scss             set ft=scss.css
autocmd BufNewFile,BufRead *.sass             set ft=sass.css

" use syntax complete if nothing else available
if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
    \ if &omnifunc == "" |
    \         setlocal omnifunc=syntaxcomplete#Complete |
    \ endif
endif

" -----------------------------------------------------
" 2.8 Completion ignore list
" -----------------------------------------------------
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ======================================================================================================================
" 3.0 Mapping settings
" ======================================================================================================================

" -----------------------------------------------------
" 3.1 Setting leader
" -----------------------------------------------------
let mapleader="\<space>"
let g:mapleader="\<space>"

" -----------------------------------------------------
" 3.2 Disabling arrow keys, space key, exmode enter with Q key
" -----------------------------------------------------
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <bs> <nop>
nnoremap <delete> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap <Space> <nop>
nnoremap Q <nop>

" -----------------------------------------------------
" 3.3 Vim default mappings tweaking and overriding
" -----------------------------------------------------

" When jump to next match also center screen
noremap n nzz
noremap N Nzz

" Same when moving up and down
noremap <c-d> <c-d>zz
noremap <c-u> <c-u>zz

" Remap VIM 0 to first non-blank character
nnoremap 0 ^
nnoremap ^ 0

" Map save to Ctrl-s
nnoremap <silent> <c-s> :w<CR>
inoremap <silent> <c-s> <Esc>:w<CR>

" Bubble single lines
nnoremap <C-k> ddkP
nnoremap <C-j> ddp

" Bubble multiple lines
vnoremap <C-j> xp`[V`]
vnoremap <C-k> xkP`[V`]

" Easily copy and past to system clipboard
vnoremap ,y "+y
nnoremap ,y "+y
nnoremap ,p "+p
nnoremap ,P "+P
vnoremap ,p "+p
vnoremap ,P "+P

" Reformat whole file easily
nnoremap <silent> ,f ggvG=

" -----------------------------------------------------
" 3.4 Toggles setup
" -----------------------------------------------------

" Toggle nerdtree (file browser) panel
nnoremap <silent> <F1> :NERDTreeToggle<CR>
" Toggle tagbar (methods, classes, etc.) window
nnoremap <silent> <F2> :TagbarToggle<CR>
" Toggle spelling on and off
nnoremap <silent> <F4> :set spell!<CR>
" Source (reload) vimrc, so new setting will be applied
nnoremap <silent> <F5> :source $MYNVIMRC<CR>
" Open my vimrc in new tab
nnoremap <silent> <F6> :tabedit $MYNVIMRC<CR>
" Toggle gundo (undo tree) panel
nnoremap <silent> <F7> :GundoToggle<CR>
" Toggle syntax checking
nnoremap <silent> <F8> :SyntasticToggleMode<CR>
" Toggle rainbow paranthesis
nnoremap <silent> <F12> :RainbowParenthesesToggle<CR>

" -----------------------------------------------------
" 3.5 Window management mappings
" -----------------------------------------------------

" Resizing using arrow keys
nnoremap <silent> <Left> :vertical resize -1<CR>
nnoremap <silent> <Right> :vertical resize +1<CR>
nnoremap <silent> <Up> :resize +1<CR>
nnoremap <silent> <Down> :resize -1<CR>

" -----------------------------------------------------
" 3.6 Tabs and buffers mappings (consider using ctrl-space)
" -----------------------------------------------------
nnoremap ,d :bd<CR>
nnoremap ,n :bn<CR>
nnoremap ,b :bp<CR>

" ======================================================================================================================
" 4.0 Plug settings
" ======================================================================================================================

" -----------------------------------------------------
" 4.1 Airline (status line) settings
" -----------------------------------------------------
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_powerline_fonts = 1
let g:airline_exclude_preview = 1

" -----------------------------------------------------
" 4.2 Nerdtree (file browser) setting
" -----------------------------------------------------
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 40

" -----------------------------------------------------
" 4.3 CTRL-P (fuzzy searcher) settings
" -----------------------------------------------------
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_cmd = 'CtrlPMixed'

if exists("g:ctrlp_user_command")
  unlet g:ctrlp_user_command
endif

if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command =
    \ 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
else
  " Fall back to using git ls-files if Ag is not available
  let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
endif

" -----------------------------------------------------
" 4.4 Syntastic (syntax checker) settings
" -----------------------------------------------------
let g:syntastic_ruby_checkers = ['mri']
" mark syntax errors with :signs
let g:syntastic_enable_signs=1
" automatically jump to the error when saving the file
let g:syntastic_auto_jump=0
" show the error list automatically
let g:syntastic_auto_loc_list=1
" check on open as well as save
let g:syntastic_check_on_open=1
" don't care about warnings
let g:syntastic_quiet_messages = {'level': 'warnings'}
" Passive mode is default
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
" Disable csslint, scss and sass syntax checking is not behaving correctly
let g:loaded_syntastic_css_csslint_checker = 0

" -----------------------------------------------------
" 4.5 Gundo (undo tree) settings
" -----------------------------------------------------
let g:gundo_right = 1
let g:gundo_preview_height = 30

" -----------------------------------------------------
" 4.6 Tagbar (methods, classes, etc. browser) settings
" -----------------------------------------------------
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

" -----------------------------------------------------
" 4.7 Ctrl-Space settings
" -----------------------------------------------------
" Use ag
if executable("ag")
  let g:ctrlspace_glob_command = 'ag -l --nocolor -g ""'
endif
" Dont use unicode font
let g:ctrlspace_unicode_font = 0

" -----------------------------------------------------
" 4.8 Yankring settings
" -----------------------------------------------------
let g:yankring_history_dir = '/tmp/'

" -----------------------------------------------------
" 4.9 Autocomplete setting
" -----------------------------------------------------

" 4.9.1 Ultisnips
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<c-z>'

" 4.9.3 Supertab settings
let g:SuperTabDefaultCompletionType = '<C-n>'

" ======================================================================================================================
" 5.0 Plugin mappings and other settings
" ======================================================================================================================

" CTRL-P and its extensions mapping
let g:ctrlp_map = '<Leader>p'
nnoremap <silent> <Leader>t :CtrlPBufTagAll<CR>
nnoremap <silent> ,, :CtrlPBuffer<CR>
nnoremap <silent> <Leader><Leader> :CtrlPCmdPalette<CR>

" Yankring mapping
nnoremap <silent> <Leader>y :YRShow<CR>

" Surround vim shortcut for quotes toggle
nmap cq cs"'
nmap cQ cs'"

" Expand region mappings
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Ruby eval mapping
nnoremap ,e :RubyEval<CR>

" ======================================================================================================================
" 6.0 Color and highlighting settings
" ======================================================================================================================

" XTerm 256 colors
if $TERM == 'xterm-256color' || 'screen-256color'
    set t_Co=256
endif

" Nice airline theme
let g:airline_theme='bubblegum'

" Color scheme changing based on time
if strftime("%H") < 13
  colorscheme Tomorrow
  let g:airline_theme='tomorrow'
elseif strftime("%H") < 18
  colorscheme Tomorrow-Night-Eighties
else
  colorscheme hybrid
endif

" Color column
let &colorcolumn=121

" Git gutter settings (signcolumn color)
highlight clear SignColumn

" Remove underline in folded lines
hi Folded term=NONE cterm=NONE gui=NONE ctermbg=NONE

" ======================================================================================================================
" 7.0 Filetype specific settings
" ======================================================================================================================

" If java(android) set appropriate indentation and color scheme
autocmd FileType java,html set shiftwidth=4| set softtabstop=4
autocmd FileType sass,coffee set shiftwidth=2| set softtabstop=2

" ======================================================================================================================
" 8.0 Autocommands and other tweaks
" ======================================================================================================================

" Close vim if the last open window is nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" The PC is fast enough, do syntax highlight syncing from start
autocmd BufEnter * :syntax sync fromstart

" ----------------------------------------------------------
" 8.1 Command abbreviations to accept case errors
" ----------------------------------------------------------
cab W! w!
cab Q! q!
cab Wq wq
cab Wa wa
cab wQ wq
cab WQ wq
cab W w
cab Q q
